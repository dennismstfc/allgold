{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denni\\\\Documents\\\\GitHub\\\\allgold-website\\\\frontend\\\\src\\\\components\\\\Statistics\\\\TopStationsDoughnut.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TopStationsDoughnut = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n  const [sellerName, setSellerName] = useState([]);\n  const [sellerAmount, setSellerAmount] = useState([]);\n\n  const chart = () => {\n    let selName = [];\n    let selAmount = [];\n    fetch(\"/sellers/top_sellers\").then(response => {\n      response.json().then(data => {\n        for (const dataObj of data.sellers) {\n          selName.push(dataObj.name);\n          selAmount.push(dataObj.amount);\n        }\n      });\n    });\n    setChartData({\n      labels: selName,\n      datasets: [{\n        label: 'Top 5 sellers',\n        data: selAmount,\n        backgroundColor: ['rgb(255, 99, 132)'],\n        borderWidth: 4\n      }]\n    });\n    console.log(selName, selAmount);\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        title: {\n          text: \"THICCNESS SCALE\",\n          display: true\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10,\n              beginAtZero: true\n            },\n            gridLines: {\n              display: false\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              display: false\n            }\n          }]\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TopStationsDoughnut, \"kYEEe/D4wKjSIHjgO9bLfLbztW0=\");\n\n_c = TopStationsDoughnut;\nexport default TopStationsDoughnut;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopStationsDoughnut\");","map":{"version":3,"sources":["C:/Users/denni/Documents/GitHub/allgold-website/frontend/src/components/Statistics/TopStationsDoughnut.js"],"names":["useEffect","useState","Line","TopStationsDoughnut","chartData","setChartData","sellerName","setSellerName","sellerAmount","setSellerAmount","chart","selName","selAmount","fetch","then","response","json","data","dataObj","sellers","push","name","amount","labels","datasets","label","backgroundColor","borderWidth","console","log","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;;AAGA,QAAMS,KAAK,GAAG,MAAM;AAEnB,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;AAEAC,IAAAA,KAAK,CAAC,sBAAD,CAAL,CAA8BC,IAA9B,CAAmCC,QAAQ,IAAI;AAC9CA,MAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBG,IAAI,IAAI;AAC5B,aAAI,MAAMC,OAAV,IAAqBD,IAAI,CAACE,OAA1B,EAAkC;AACjCR,UAAAA,OAAO,CAACS,IAAR,CAAaF,OAAO,CAACG,IAArB;AACAT,UAAAA,SAAS,CAACQ,IAAV,CAAeF,OAAO,CAACI,MAAvB;AACA;AAED,OAND;AAOA,KARD;AAUAjB,IAAAA,YAAY,CAAE;AACbkB,MAAAA,MAAM,EAAEZ,OADK;AAEba,MAAAA,QAAQ,EAAE,CACT;AACCC,QAAAA,KAAK,EAAE,eADR;AAECR,QAAAA,IAAI,EAAEL,SAFP;AAGCc,QAAAA,eAAe,EAAE,CAChB,mBADgB,CAHlB;AAOCC,QAAAA,WAAW,EAAE;AAPd,OADS;AAFG,KAAF,CAAZ;AAcCC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ,EAAqBC,SAArB;AACD,GA9BD;;AAgCAZ,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,KAAK;AACL,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC;AAAA,2BACG,QAAC,IAAD;AACK,MAAA,IAAI,EAAEN,SADX;AAEK,MAAA,OAAO,EAAE;AACP0B,QAAAA,UAAU,EAAE,IADL;AAEPC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,iBAAR;AAA2BC,UAAAA,OAAO,EAAE;AAApC,SAFA;AAGPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,KAAK,EAAE;AACLC,cAAAA,QAAQ,EAAE,IADL;AAELC,cAAAA,aAAa,EAAE,EAFV;AAGLC,cAAAA,WAAW,EAAE;AAHR,aADT;AAMEC,YAAAA,SAAS,EAAE;AACTP,cAAAA,OAAO,EAAE;AADA;AANb,WADK,CADD;AAaNQ,UAAAA,KAAK,EAAE,CACL;AACED,YAAAA,SAAS,EAAE;AACTP,cAAAA,OAAO,EAAE;AADA;AADb,WADK;AAbD;AAHD;AAFd;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADD;AAgCA,CA3ED;;GAAM9B,mB;;KAAAA,mB;AA6EN,eAAeA,mBAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst TopStationsDoughnut = () => {\r\n\r\n\tconst [chartData, setChartData] = useState({});\r\n\tconst [sellerName, setSellerName] = useState([]);\r\n\tconst [sellerAmount, setSellerAmount] = useState([]);\r\n\r\n\r\n\tconst chart = () => {\t\r\n\t\t\r\n\t\tlet selName = [];\r\n\t\tlet selAmount = []; \r\n\r\n\t\tfetch(\"/sellers/top_sellers\").then(response => {\r\n\t\t\tresponse.json().then(data => {\r\n\t\t\t\tfor(const dataObj of data.sellers){\r\n\t\t\t\t\tselName.push(dataObj.name)\t\t\t\t\t\r\n\t\t\t\t\tselAmount.push(dataObj.amount)\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t});\r\n\t\t\t\r\n\t\tsetChartData ({\r\n\t\t\tlabels: selName,\r\n\t\t\tdatasets: [\r\n\t\t\t\t{ \r\n\t\t\t\t\tlabel: 'Top 5 sellers',\r\n\t\t\t\t\tdata: selAmount,\r\n\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t'rgb(255, 99, 132)',\r\n\t\t\t\t\t\r\n\t\t\t\t\t],\r\n\t\t\t\t\tborderWidth: 4\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t\t})\r\n\t\t\tconsole.log(selName, selAmount);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tchart();\r\n\t}, []);\r\n\r\n\treturn ( \r\n\t\t<div>\r\n\t\t\t  <Line\r\n          data={chartData}\r\n          options={{\r\n            responsive: true,\r\n            title: { text: \"THICCNESS SCALE\", display: true },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 10,\r\n                    beginAtZero: true\r\n                  },\r\n                  gridLines: {\r\n                    display: false\r\n                  }\r\n                }\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n\t\t</div>\r\n\t );\r\n}\r\n \r\nexport default TopStationsDoughnut;"]},"metadata":{},"sourceType":"module"}