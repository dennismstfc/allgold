{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denni\\\\Documents\\\\GitHub\\\\allgold-website\\\\frontend\\\\src\\\\components\\\\Stations\\\\EditStationForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditStationForm = ({\n  stationToBeEdited\n}) => {\n  _s();\n\n  const [location, setLocation] = useState(stationToBeEdited.location);\n  const [longitude, setLongitude] = useState(stationToBeEdited.longitude);\n  const [latitude, setLatitude] = useState(stationToBeEdited.latitude);\n  const [type, setType] = useState(stationToBeEdited.type);\n  const [description, setDescription] = useState(stationToBeEdited.description);\n  const [seller_id, setSellerID] = useState(stationToBeEdited.seller_id);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Standort\",\n        placeholder: \"Standort\",\n        value: location,\n        onChange: e => setLocation(e.target.value),\n        width: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Seller ID\",\n        placeholder: \"Seller ID\",\n        valule: seller_id,\n        onChange: e => setSellerID(e.target.value),\n        width: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Longitude\",\n        placeholder: \"Longitude\",\n        value: longitude,\n        onChange: e => setLongitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Latitude\",\n        placeholder: \"Latitude\",\n        value: latitude,\n        onChange: e => setLatitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Typ\",\n        placeholder: \"Typ\",\n        value: type,\n        onChange: e => setType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n      fluid: true,\n      label: \"Beschreibung\",\n      placeholder: \"Beschreibung\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/verkaufsstellen-auflisten\",\n      onClick: async () => {\n        const station = {\n          location,\n          longitude,\n          latitude,\n          type,\n          description,\n          seller_id\n        };\n        const response = await fetch(\"/stations/\" + stationToBeEdited.station_id, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(station)\n        });\n\n        if (response.ok) {\n          console.log(\"response worked!\");\n          setLocation(\"\");\n          setLongitude(\"\");\n          setType(\"\");\n          setLatitude(\"\");\n          setDescription(\"\");\n          setSellerID(\"\");\n        }\n      },\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 8\n  }, this);\n};\n\n_s(EditStationForm, \"rva6Av8oerdO4FsvqlEl0AB7iFs=\");\n\n_c = EditStationForm;\nexport default EditStationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditStationForm\");","map":{"version":3,"sources":["C:/Users/denni/Documents/GitHub/allgold-website/frontend/src/components/Stations/EditStationForm.js"],"names":["React","useState","Form","Button","Link","EditStationForm","stationToBeEdited","location","setLocation","longitude","setLongitude","latitude","setLatitude","type","setType","description","setDescription","seller_id","setSellerID","e","target","value","station","response","fetch","station_id","method","headers","body","JSON","stringify","ok","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst EditStationForm = ({ stationToBeEdited }) => {\r\n    const [location, setLocation] = useState(stationToBeEdited.location);\r\n    const [longitude, setLongitude] = useState(stationToBeEdited.longitude);\r\n    const [latitude, setLatitude] = useState(stationToBeEdited.latitude);\r\n    const [type, setType] = useState(stationToBeEdited.type);\r\n    const [description, setDescription] = useState(stationToBeEdited.description);\r\n    const [seller_id, setSellerID] = useState(stationToBeEdited.seller_id);\r\n\r\n\r\n    return ( \r\n       <Form>\r\n           <Form.Group>\r\n               <Form.Input\r\n                    fluid\r\n                    label='Standort'\r\n                    placeholder=\"Standort\"\r\n                    value={location}\r\n                    onChange={e => setLocation(e.target.value)}\r\n                    width={14}\r\n                />\r\n\r\n                <Form.Input\r\n                    fluid\r\n                    label='Seller ID'\r\n                    placeholder='Seller ID'\r\n                    valule={seller_id}\r\n                    onChange={e => setSellerID(e.target.value)}\r\n                    width={2}\r\n                />\r\n           </Form.Group>\r\n          \r\n           <Form.Group widths='equal'>\r\n                <Form.Input\r\n                    fluid\r\n                    label='Longitude'\r\n                    placeholder=\"Longitude\"\r\n                    value={longitude}\r\n                    onChange={e => setLongitude(e.target.value)}\r\n                />\r\n                \r\n                <Form.Input\r\n                    fluid\r\n                    label='Latitude'\r\n                    placeholder=\"Latitude\"\r\n                    value={latitude}\r\n                    onChange={e => setLatitude(e.target.value)}\r\n                />\r\n                \r\n               <Form.Input\r\n                    fluid\r\n                    label='Typ'\r\n                    placeholder='Typ'\r\n                    value={type}\r\n                    onChange={e => setType(e.target.value)}\r\n               />\r\n            </Form.Group>\r\n        \r\n               <Form.TextArea\r\n                fluid\r\n                label='Beschreibung'\r\n                placeholder=\"Beschreibung\"\r\n                value={description}\r\n                onChange={e => setDescription(e.target.value)}\r\n                />\r\n\r\n            <Link to='/verkaufsstellen-auflisten'\r\n            onClick={async () => {\r\n                const station = {location, longitude, latitude, type, description, seller_id};\r\n                const response = await fetch(\"/stations/\"+stationToBeEdited.station_id, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(station)\r\n                });\r\n\r\n                if (response.ok){\r\n                    console.log(\"response worked!\");\r\n                    setLocation(\"\");\r\n                    setLongitude(\"\");\r\n                    setType(\"\");\r\n                    setLatitude(\"\");\r\n                    setDescription(\"\");\r\n                    setSellerID(\"\");\r\n\r\n                }\r\n            }}\r\n            \r\n            >\r\n                Update\r\n            </Link>\r\n       </Form> \r\n     );\r\n}\r\n \r\nexport default EditStationForm;"]},"metadata":{},"sourceType":"module"}